[
  {
    "objectID": "tools-to-help-you.html#setup-rstudio-optional",
    "href": "tools-to-help-you.html#setup-rstudio-optional",
    "title": "Tools to help you",
    "section": "Setup RStudio (optional)",
    "text": "Setup RStudio (optional)\nThe following is consolidated from https://rstudio-conf-2020.github.io/r-for-excel/.\n\nDownload and install\nFrom r-for-excel::prerequesites\n\nDownload and install R and RStudio\n\nR: https://cloud.r-project.org/\nRStudio: http://www.rstudio.com/download\nFollow your operating system’s normal installation process\n\nCreate a GitHub account\n\nGitHub: https://github.com\nFollow optional advice on choosing your username\nRemember your username, email and password; we will need them for the workshop!\n\nDownload and install Git\n\nGit: https://git-scm.com/downloads\nFollow your operating system’s normal installation process. Note: you will not see an application called Git listed but if the installation process completed it was likely successful, and we will confirm together\n\nDownload workshop data\n\nGoogle Drive folder: r-for-excel-data\nSave it temporarily somewhere you will remember; we will move it together"
  },
  {
    "objectID": "tools-to-help-you.html#configure-rstudio-with-github-and-quarto",
    "href": "tools-to-help-you.html#configure-rstudio-with-github-and-quarto",
    "title": "Tools to help you",
    "section": "Configure RStudio with GitHub and Quarto",
    "text": "Configure RStudio with GitHub and Quarto\nFrom r-for-excel::github-brief-intro-config\nBefore we do the setup configuration, let me take a moment to talk about what Git and GitHub are.\nIt helps me to think of GitHub like Dropbox: you identify folders for GitHub to ‘track’ and it syncs them to the cloud. This is good first-and-foremost because it makes a back-up copy of your files: if your computer dies not all of your work is gone. But with GitHub, you have to be more deliberate about when syncs are made. This is because GitHub saves these as different versions, with information about who contributed when, line-by-line. This makes collaboration easier, and it allows you to roll-back to different versions or contribute to others’ work.\ngit will track and version your files, GitHub stores this online and enables you to collaborate with others (and yourself). Although git and GitHub are two different things, distinct from each other, we can think of them as a bundle since we will always use them together.\n\nConfigure GitHub\nThis set up is a one-time thing! You will only have to do this once per computer. We’ll walk through this together. In a browser, go to github.com and to your profile page as a reminder.\nYou will need to remember your GitHub username, the email address you created your GitHub account with, and your GitHub password.\nWe will be using the use_git_config() function from the usethis package we just installed.\n#| eval: false\n## install the usethis package\ninstall.packages(\"usethis\")\n\n## use_git_config function with my username and email as arguments\nusethis::use_git_config(user.name = \"jules32\", user.email = \"jules32@example.org\")\nIf you see Error in use_git_config() : could not find function \"use_git_config\" please run library(\"usethis\")\n\n\nEnsure that Git/GitHub/RStudio are communicating\nWe are going to go through a few steps to ensure the Git/GitHub are communicating with RStudio\n\nRStudio: New Project\nClick on New Project. There are a few different ways; you could also go to File > New Project…, or click the little green + with the R box in the top left. also in the File menu).\n\n\n\n\n\nSelect Version Control\n\n\n\n\n\nSelect Git\nSince we are using git.\n\n ```\n\nDo you see what I see?\n\n\n\nIf yes, hooray! Let’s troubleshoot. See:\n\nHappyGitWithR’s troubleshooting chapter\nR-for-excel troubleshooting chapter"
  },
  {
    "objectID": "tools-to-help-you.html#sync-from-rstudio-local-to-github-remote",
    "href": "tools-to-help-you.html#sync-from-rstudio-local-to-github-remote",
    "title": "Tools to help you",
    "section": "Sync from RStudio (local) to GitHub (remote)",
    "text": "Sync from RStudio (local) to GitHub (remote)\nSyncing to GitHub.com means 4 steps:\n\nPull\nStage\nCommit\nPush\n\n\n\n\nWe start off this whole process by clicking on the Commit section.\n\n\n\n\nPull\nWe start off by “Pulling” from the remote repository (GitHub.com) to make sure that our local copy has the most up-to-date information that is available online. Right now, since we just created the repo and are the only ones that have permission to work on it, we can be pretty confident that there isn’t new information available. But we pull anyways because this is a very safe habit to get into for when you start collaborating with yourself across computers or others. Best practice is to pull often: it costs nothing (other than an internet connection).\nPull by clicking the teal Down Arrow. (Notice also how when you highlight a filename, a preview of the differences displays below).\n\n\n\n\n\nStage\nLet’s click the boxes next to each file. This is called “staging a file”: you are indicating that you want GitHub to track this file, and that you will be syncing it shortly. Notice:\n\n.Rproj and .gitignore files: the question marks turn into an A because these are new files that have been added to your repo (automatically by RStudio, not by you).\nREADME.md file: the M indicates that this was modified (by you)\n\nThese are the codes used to describe how the files are changed, (from the RStudio cheatsheet):\n\n\n\n\n\nCommit\nCommitting is different from saving our files (which we still have to do! RStudio will indicate a file is unsaved with red text and an asterix). We commit a single file or a group of files when we are ready to save a snapshot in time of the progress we’ve made. Maybe this is after a big part of the analysis was done, or when you’re done working for the day.\nCommitting our files is a 2-step process.\nFirst, you write a “commit message”, which is a human-readable note about what has changed that will accompany GitHub’s non-human-readable alphanumeric code to track our files. I think of commit messages like breadcrumbs to my Future Self: how can I use this space to be useful for me if I’m trying to retrace my steps (and perhaps in a panic?).\nSecond, you press Commit.\n\n\n\nWhen we have committed successfully, we get a rather unsuccessful-looking pop-up message. You can read this message as “Congratulations! You’ve successfully committed 3 files, 2 of which are new!” It is also providing you with that alphanumeric SHA code that GitHub is using to track these files.\nIf our attempt was not successful, we will see an Error. Otherwise, interpret this message as a joyous one.\n\nDoes your pop-up message say “Aborting commit due to empty commit message.”? GitHub is really serious about writing human-readable commit messages. \n\n\n\nWhen we close this window there is going to be (in my opinion) a very subtle indication that we are not done with the syncing process.\n\n\n\nWe have successfully committed our work as a breadcrumb-message-approved snapshot in time, but it still only exists locally on our computer. We can commit without an internet connection; we have not done anything yet to tell GitHub that we want this pushed to the remote repo at GitHub.com. So as the last step, we push.\n\n\nPush\nThe last step in the syncing process is to Push!\n\n\n\nAwesome! We’re done here in RStudio for the moment, let’s check out the remote on GitHub.com.\n\n\nCommit history\nThe files you added should be on github.com.\nNotice how the README.md file we created is automatically displayed at the bottom. Since it is good practice to have a README file that identifies what code does (i.e. why it exists), GitHub will display a Markdown file called README nicely formatted.\n\n\n\n\nSet up Quarto\nInstall Quarto from https://quarto.org. You will use your computer’s install wizard to do this, and then you’re set! There won’t be a separate app or anything installed, but now this will be available to RStudio."
  },
  {
    "objectID": "index.html#examples",
    "href": "index.html#examples",
    "title": "Making open-source documents with Quarto",
    "section": "Examples",
    "text": "Examples\nWe have been using Quarto for documentation without any code, as well as for Python (and R code upcoming):\n\nOpenscapes Champions Lessons Series. A collection of .md files.\nOpenscapes Approach Guide. A collection of .md and .qmd files.\n2021 NASA Cloud Hackathon. A collection of .ipynb and .md files.\n\n\nInspiration\nAre you making onboarding documentation? Check out The Fay Lab Manual for inspiration on structure - you could also start there and make it your own."
  },
  {
    "objectID": "basic-workflow.html",
    "href": "basic-workflow.html",
    "title": "Basic workflow",
    "section": "",
    "text": "_quarto.yml\ncommit. how this is diff from the browser."
  },
  {
    "objectID": "first-observations.html#your-turn",
    "href": "first-observations.html#your-turn",
    "title": "First observations",
    "section": "Your turn",
    "text": "Your turn\nThese instructions are for starting with an existing Quarto site and copying it into your space to edit.\n\nChoose an existing website/book\nA simple option is to start with this site: https://github.com/Openscapes/quarto-website-tutorial.\nOther options of potential interest:\n\nhttps://github.com/NASA-Openscapes/2021-Cloud-Hackathon\nhttps://github.com/podaac/2022-SWOT-Ocean-Cloud-Workshop\n\n\n\nFork the existing repo\nFollow these steps from Gavin Fay, using the repo you chose.\nhttps://github.com/thefaylab/lab-manual/wiki/Quick-steps-to-making-a-copy-of-the-lab-manual-&-publishing-it\nNow you’re set up to edit from the GitHub browser and your book will be republished with our edits. A workflow from the browser if good for getting started/making small contributions but is definitely limited. Once you feel comfortable here, you can move to a different setup."
  }
]