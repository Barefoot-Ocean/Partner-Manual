[
  {
    "objectID": "quarto-overview.html#quarto-basic-workflow",
    "href": "quarto-overview.html#quarto-basic-workflow",
    "title": "Quarto Overview",
    "section": "Quarto basic workflow",
    "text": "Quarto basic workflow\nDeveloping your quarto site will have the same basic workflow, no matter which tool you use to edit. It is very iterative.\n\nCreate content (text, code, images, etc) in a file. Supported files include .md, .Rmd, .qmd, .ipynb…\nUpdate _quarto.yml as needed (for example, if you’ve created a new file you’d like included in your site)\nQuarto Render individual files and/or the whole website (if editing from the browser this step will not be separate but combined with Step 5)\nRepeat, repeat, repeat\nCommit and push your website to GitHub, your updates will publish automatically! (if editing from the brower, only commit - no need to push)\nRepeat all of the above"
  },
  {
    "objectID": "quarto-overview.html#quarto.yml",
    "href": "quarto-overview.html#quarto.yml",
    "title": "Quarto Overview",
    "section": "_quarto.yml",
    "text": "_quarto.yml\nLet’s have a closer look at the _quarto.yml file.\nThis type of file (.yml or .yaml) is written in YAML (“Yet Another Markup Language”). You’ll be able to shift the arrangement of webpages by reordering/adding/deleting them in the _quarto.yml file following the patterns you see in this example. As you modify _quarto.yml, the most important thing to know is that spacing matters. Pay attention to whether text is indented by one, two, four, or other spaces, and make sure you follow it; if your site is not looking as expected it is likely a silent error in your YAML. Some text editors like RStudio provide debugging support for YAML and are highly recommended to save you time and heartache.\n\n\n\n_quarto.yml and website side-by-side\n\n\nNotice that there are multiple ways in the _quarto.yml for you to include a file in your website. For example, in the above image, the “First Observations” we see in the left sidebar of the published website (right image) is represented in _quarto.yml (left image) over two lines, with line 36 indicating the file reference and line 37 indicating the text to show up in the left sidebar. However, “From RStudio” is only represented in one line of _quarto.yml, on line 43. This represents two strategies for including a file in your website. By default, the title of a specified file will show up in the website’s sidebar, which is what is happening with the “From RStudio” example. If you would like more control over what is written in the sidebar vs the title of your files, then the approach we took with “First Observations” is what you’ll want to do. In this example, you’ll see that only “First Observations” shows up in the sidebar as we specified in _quarto.yml, but the page’s title says “First Observations & Setup” (which in our preference was too long for the sidebar)."
  },
  {
    "objectID": "quarto-overview.html#next-up-workflows",
    "href": "quarto-overview.html#next-up-workflows",
    "title": "Quarto Overview",
    "section": "Next up: workflows",
    "text": "Next up: workflows\nIn the next sections we’ll see what this workflow looks like using different tools for editing your files. We’ll start off from the browser so you don’t need to install any additional software, however this approach is very limited and you will soon outgrow its capabilities. See all the tools that are supported at https://quarto.org/docs/get-started/.\nIf you don’t already have a workflow and to edit files and sync to GitHub from your computer, I recommend RStudio. You don’t need to know R to use RStudio, and it has powerful editor features that make for happy workflows."
  },
  {
    "objectID": "index.html#example-quarto-websites",
    "href": "index.html#example-quarto-websites",
    "title": "Making open-source documents with Quarto",
    "section": "Example Quarto websites",
    "text": "Example Quarto websites\nWe so far have been using Quarto for documentation using Markdown and Jupyter Notebooks.\n\nChampions Lessons Series\nOpenscapes Approach Guide\n\n2021 NASA Cloud Hackathon\n\nSee many more examples at the quarto gallery!\n\nInspiration\nAre you making onboarding documentation? Check out The Fay Lab Manual for inspiration on structure - you could also start there and make it your own."
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Making open-source documents with Quarto",
    "section": "About",
    "text": "About\nOpenscapes is about better science for future us. We help researchers reimagine data analysis, develop modern skills that are of immediate value to them, and cultivate collaborative and inclusive research teams as part of the broader global open movement.\nWe’re developing this tutorial to help folks of different technical skills use Quarto for documentation and tutorial building. This tutorial was originally created for several different audiences: NASA-Openscapes researcher support engineers using Python, communications directors at organizations promoting open science who do not identify as coders, and fisheries scientists curious about transitioning from RMarkdown. We’re hoping it’s useful to folks with backgrounds as wide as these; if you find it useful or have suggestions for improvement, please let us know by clicking “Edit this page” or “Report an issue” at the upper right side of any page."
  },
  {
    "objectID": "transition-from-rmarkdown.html#bookdown-to-quarto",
    "href": "transition-from-rmarkdown.html#bookdown-to-quarto",
    "title": "Transition from RMarkdown",
    "section": "Bookdown to quarto",
    "text": "Bookdown to quarto\ncreate _quarto.yml\nProject options > build tools > project build tools > none\nReload project\nDon’t need to delete anything immediately, but look at output.yml, purge afterbody.\n\nGitHub actions\nR"
  },
  {
    "objectID": "transition-from-rmarkdown.html#distill-to-quarto",
    "href": "transition-from-rmarkdown.html#distill-to-quarto",
    "title": "Transition from RMarkdown",
    "section": "Distill to quarto",
    "text": "Distill to quarto\nUpcoming"
  },
  {
    "objectID": "render-vs-preview.html#render",
    "href": "render-vs-preview.html#render",
    "title": "Render vs. Preview",
    "section": "Render",
    "text": "Render\nRendering is when…\nIt’s like saying “show me”.\nSometimes files get big and complicated with code, so Quarto will not render files by default. It will never run .ipynb files unless you tell it to."
  },
  {
    "objectID": "render-vs-preview.html#previewserve",
    "href": "render-vs-preview.html#previewserve",
    "title": "Render vs. Preview",
    "section": "Preview/Serve",
    "text": "Preview/Serve\nPreview is\n\nthis has been called “Serve” in the past\nyou don’t ever need to serve if you’re working in RStudio (?)"
  },
  {
    "objectID": "render-vs-preview.html#when-do-i-want-preview-vs-serve",
    "href": "render-vs-preview.html#when-do-i-want-preview-vs-serve",
    "title": "Render vs. Preview",
    "section": "When do I want Preview vs Serve?",
    "text": "When do I want Preview vs Serve?\nComparison to knitting in RMarkdown (?)"
  },
  {
    "objectID": "render-vs-preview.html#if-im-in-jupyter-labhub",
    "href": "render-vs-preview.html#if-im-in-jupyter-labhub",
    "title": "Render vs. Preview",
    "section": "If I’m in Jupyter Lab/Hub",
    "text": "If I’m in Jupyter Lab/Hub\nIn terminal, cd to repo…\n\nTroubleshooting\nIf it hangs/if I get errors:\nCheck the specific notebook, are there ---? Delete those. Is there too much in the first raw cell? Change that"
  },
  {
    "objectID": "render-vs-preview.html#if-im-in-rstudio-ide",
    "href": "render-vs-preview.html#if-im-in-rstudio-ide",
    "title": "Render vs. Preview",
    "section": "If I’m in RStudio IDE",
    "text": "If I’m in RStudio IDE\nBuild tab click buttons….\nTerminal…\nOr alternatively, R console…\nWhen does it preview automatically?"
  },
  {
    "objectID": "basic-workflows/rstudio.html#setup-rstudio-and-github",
    "href": "basic-workflows/rstudio.html#setup-rstudio-and-github",
    "title": "From RStudio",
    "section": "Setup RStudio and GitHub",
    "text": "Setup RStudio and GitHub\nFor a workflow with RStudio and GitHub on your local computer, you will need four things:\n\nR\nRStudio\nGit\nGitHub\n\nFollow the UCSB MEDS Installation Guide for detailed instructions on how to create accounts, download, install, and configure on Mac and Windows. (For an even more detailed walk-through, see Allison Horst’s ESM 206 Google Doc). Thanks for sharing Allison!\nIf you’d like to practice the workflow with RStudio and GitHub, follow R for Excel Users’ GitHub Chapter. This describes how to create a GitHub repository, clone it to RStudio, make edits, and practice syncing."
  },
  {
    "objectID": "basic-workflows/rstudio.html#install-quarto",
    "href": "basic-workflows/rstudio.html#install-quarto",
    "title": "From RStudio",
    "section": "Install Quarto",
    "text": "Install Quarto\nNext, you’ll install Quarto. Download Quarto from https://quarto.org/docs/get-started/. Follow the installation wizard on your computer. When it is complete, you won’t see an application or any new software, but it is now available to RStudio (as well as other applications, including the command line)."
  },
  {
    "objectID": "basic-workflows/rstudio.html#rstudio-landscape",
    "href": "basic-workflows/rstudio.html#rstudio-landscape",
    "title": "From RStudio",
    "section": "RStudio Landscape",
    "text": "RStudio Landscape\nTODO: screenshots of IDE, orienting"
  },
  {
    "objectID": "basic-workflows/rstudio.html#create-a-new-page",
    "href": "basic-workflows/rstudio.html#create-a-new-page",
    "title": "From RStudio",
    "section": "Create a new page",
    "text": "Create a new page"
  },
  {
    "objectID": "basic-workflows/rstudio.html#visual-editor",
    "href": "basic-workflows/rstudio.html#visual-editor",
    "title": "From RStudio",
    "section": "Visual Editor",
    "text": "Visual Editor"
  },
  {
    "objectID": "basic-workflows/rstudio.html#render-on-save",
    "href": "basic-workflows/rstudio.html#render-on-save",
    "title": "From RStudio",
    "section": "Render on Save",
    "text": "Render on Save"
  },
  {
    "objectID": "basic-workflows/browser.html#edit-content-on-an-existing-page",
    "href": "basic-workflows/browser.html#edit-content-on-an-existing-page",
    "title": "From the Browser",
    "section": "Edit content on an existing page",
    "text": "Edit content on an existing page\nLet’s change the date on the home page of this website.\nIn your repository, navigate to index.md. Then, click the pencil icon in the top left to edit directly.\n\n\n\n\n\nWe are now in the “Edit file” tab of the editor, where we can make modifications. Click the “Preview” tab to see your changes. You can even check the “Show diff” box on the right side to see the changes you’ve made.\n\n\n\n\n\nWhile you’re here, see if there are additional changes to the text you’d like to make. Maybe changing the title or author at the top, or for the main text on the home page of the website.\nOur index.md file is written in Markdown, which enables you to make simple text formatting. As you go back and forth from “Edit file” to “Preview”, notice the patterns of how the Markdown text looks when it is as source (“Edit file”) and when it is formatted (“Preview”). For example, in Markdown, you can make text as a header with # symbols, bold or italic with * symbols, and hyperlinks with [](). Notice that spacing is important: for example, there are carriage returns (when you hit the “return” key) before any bullet points. You can learn the short list of Markdown rules here: https://quarto.org/docs/authoring/markdown-basics."
  },
  {
    "objectID": "basic-workflows/browser.html#commit-and-publish",
    "href": "basic-workflows/browser.html#commit-and-publish",
    "title": "From the Browser",
    "section": "Commit and publish",
    "text": "Commit and publish\nCommit your changes by scrolling to the bottom of the page and writing a commit message - a note to yourself and others about what happened. Write your commit message and then click the green “Commit changes” button.\n\n\n\n\n\nNow, click back to the main page of your GitHub repository. You should see the orange dot confirming your website is published. You’ll have to wait for the GitHub Action to tell quarto to build your site for you to see the update, but it will be there!"
  },
  {
    "objectID": "basic-workflows/browser.html#limitations",
    "href": "basic-workflows/browser.html#limitations",
    "title": "From the Browser",
    "section": "Limitations",
    "text": "Limitations\nWhile awesome that we can edit using GitHub directly from the browser, there are obvious limitations. One is that to see your edits show up in your book, you have to publish using the GitHub Action. This is slow. Another limitation is that we can only work on one file at a time and commit them each separately, which also is slow. Using additional software can make things much better, as we explore in subsequent chapters."
  },
  {
    "objectID": "basic-workflows/jupyterhub.html#setup",
    "href": "basic-workflows/jupyterhub.html#setup",
    "title": "From JupyterHub",
    "section": "Setup",
    "text": "Setup\n[screenshot of setup]"
  },
  {
    "objectID": "basic-workflows/jupyterhub.html#install-quarto",
    "href": "basic-workflows/jupyterhub.html#install-quarto",
    "title": "From JupyterHub",
    "section": "Install Quarto",
    "text": "Install Quarto\nDownload Quarto from https://quarto.org/docs/get-started/. Follow the installation wizard on your computer. When it is complete, you won’t see an application or any new software, but it is now available to RStudio."
  },
  {
    "objectID": "basic-workflows/jupyterhub.html#lets-add-a-file",
    "href": "basic-workflows/jupyterhub.html#lets-add-a-file",
    "title": "From JupyterHub",
    "section": "Let’s add a file",
    "text": "Let’s add a file"
  },
  {
    "objectID": "basic-workflows/getting-sophisticated.html",
    "href": "basic-workflows/getting-sophisticated.html",
    "title": "Getting Sophisticated",
    "section": "",
    "text": "There are a lot of ways to make you website design more sophisticated. Here are a few ways to help you get started. Note that Quarto builds from what RStudio learned in making RMarkdown, so while these notes discuss RMarkdown, they are relevant here too!\nhttps://jules32.github.io/rmarkdown-website-tutorial/getting_sophisticated.html"
  },
  {
    "objectID": "first-observations.html#exploring-online",
    "href": "first-observations.html#exploring-online",
    "title": "First Observations & Setup",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 6 things you can see on the left sidebar:\n\nWelcome\nFirst Observations\nQuarto Overview\nBasic Workflows\nRender vs. Preview\nTransition from RMarkdown\n\nMost of these are pages, but you’ll see that “Basic Workflows” has an arrow; it is a folder with additional pages inside.\n\n\nThe website’s repo\nLet’s go to this website’s GitHub repository (also called a “repo”), https://github.com/openscapes/quarto-website-tutorial. From this website, you can get to the repo by clicking the GitHub octocat icon underneath the Openscapes logo (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we’ve seen above, and they have red arrows marking them in the image below. You’ll see the “basic-workflows” folder and the rest in this site are .md files, which are plain Markdown files. index.md is the home page.\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows"
  },
  {
    "objectID": "first-observations.html#quarto.yml-intro",
    "href": "first-observations.html#quarto.yml-intro",
    "title": "First Observations & Setup",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website’s configuration file. It is a directory of the order that the pages/chapters will be in. This is where you update the organization of your website. If we compare side-by-side, you’ll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe’ll learn more about how to interact with _quarto.yml in the Quarto Overview."
  },
  {
    "objectID": "first-observations.html#fork-to-your-account",
    "href": "first-observations.html#fork-to-your-account",
    "title": "First Observations & Setup",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet’s start with an existing Quarto site and copy it into your space to edit. You’ll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nApproach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you’ve got a copy of your repo of choice in your own GitHub account, and you’re set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can’t fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you’ll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green “Code” button and select “Download ZIP”. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you’d like. You’ll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you’re logged in, github.com will show a green button that says “New” which you’ll also see as you navigate to your username’s repository page.\n\n\nAdd template site files\nTo use the GitHub file uploader, click the button next to the green “Code” button that says “Add file”. Add file > Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you’re working in the browser.\nNote: if you’re comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that can be preferable to the uploader, which does have limitations with complex repos (although the uploader works fine with this tutorial repo).\n\n\nSet up GitHub publishing\nIf you’ve used the GitHub uploader, you are not quite set up for publishing. We’ll do this in a few steps: we’ll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository in blue at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file > Create new file. Name it exactly this: .github/workflows/quarto-render.yml\nStart by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-render.yml.\nNow you’ll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\nname: Render and deploy quarto files\non: \n  push:\n  pull_request:\n\njobs:\n  quarto-render-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: \"Install Quarto and render project\"\n      uses: nasa-openscapes/quarto-render@v0.9.46 \n\n    - name: \"Deploy to gh-pages\"\n      uses: peaceiris/actions-gh-pages@v3\n      if: github.ref == 'refs/heads/main'\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: ./_site\nCommit this to save your new quarto-render.yml file. This is your GitHub Action.\nNext, we’ll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green “Code” button, click the button that says “main”. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says “Create branch: gh-pages from main”.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under “Source”, select gh-pages root, and press Save. You’ll then see a green highlighted text saying that your site is published at a “github.io” url ."
  },
  {
    "objectID": "first-observations.html#confirm",
    "href": "first-observations.html#confirm",
    "title": "First Observations & Setup",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You’ll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you might need to make a small commit to trigger the GitHub Actions build. If this is the case, click the pencil on the top-right of the README.md file as circled in the image below, add some small edit (like a space after a period), and scroll down to click commit. Now you should see the orange dot.\n\n\n\n\n\nWhen your orange do becomes a green check, you can go inspect your published site at “https://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build"
  },
  {
    "objectID": "first-observations.html#renaming-your-repo",
    "href": "first-observations.html#renaming-your-repo",
    "title": "First Observations & Setup",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you’d like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.\n\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown."
  }
]