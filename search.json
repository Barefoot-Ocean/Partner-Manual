[
  {
    "objectID": "index.html#example-quarto-sites",
    "href": "index.html#example-quarto-sites",
    "title": "Making open-source documents with Quarto",
    "section": "Example quarto sites",
    "text": "Example quarto sites\nWe so far have been using Quarto for documentation using Markdown and Jupyter Notebooks.\n\nChampions Lessons Series\nOpenscapes Approach Guide\n\n2021 NASA Cloud Hackathon\n\nSee many more examples at the quarto gallery!\n\nInspiration\nAre you making onboarding documentation? Check out The Fay Lab Manual for inspiration on structure - you could also start there and make it your own."
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Making open-source documents with Quarto",
    "section": "About",
    "text": "About\nOpenscapes is about better science for future us. We help researchers reimagine data analysis, develop modern skills that are of immediate value to them, and cultivate collaborative and inclusive research teams as part of the broader global open movement.\nWe’re developing this tutorial to help folks of different technical skills use quarto for documentation and tutorial building. This tutorial was originally created for both NASA-Openscapes researcher support engineers and communications directors at organizations promoting open science. The structure follows a previous tutorial Making free websites with RStudio’s RMarkdown."
  },
  {
    "objectID": "transition-from-rmarkdown.html#bookdown-to-quarto",
    "href": "transition-from-rmarkdown.html#bookdown-to-quarto",
    "title": "Transition from RMarkdown",
    "section": "Bookdown to quarto",
    "text": "Bookdown to quarto\ncreate _quarto.yml\nProject options > build tools > project build tools > none\nReload project\nDon’t need to delete anything immediately, but look at output.yml, purge afterbody.\n\nGitHub actions\nR"
  },
  {
    "objectID": "transition-from-rmarkdown.html#distill-to-quarto",
    "href": "transition-from-rmarkdown.html#distill-to-quarto",
    "title": "Transition from RMarkdown",
    "section": "Distill to quarto",
    "text": "Distill to quarto\nUpcoming"
  },
  {
    "objectID": "render-vs-preview.html#render",
    "href": "render-vs-preview.html#render",
    "title": "Render vs. Preview",
    "section": "Render",
    "text": "Render\nRendering is when…\nIt’s like saying “show me”.\nSometimes files get big and complicated with code, so Quarto will not render files by default. It will never run .ipynb files unless you tell it to."
  },
  {
    "objectID": "render-vs-preview.html#previewserve",
    "href": "render-vs-preview.html#previewserve",
    "title": "Render vs. Preview",
    "section": "Preview/Serve",
    "text": "Preview/Serve\nPreview is\n\nthis has been called “Serve” in the past\nyou don’t ever need to serve if you’re working in RStudio (?)"
  },
  {
    "objectID": "render-vs-preview.html#when-do-i-want-preview-vs-serve",
    "href": "render-vs-preview.html#when-do-i-want-preview-vs-serve",
    "title": "Render vs. Preview",
    "section": "When do I want Preview vs Serve?",
    "text": "When do I want Preview vs Serve?\nComparison to knitting in RMarkdown (?)"
  },
  {
    "objectID": "render-vs-preview.html#if-im-in-jupyter-labhub",
    "href": "render-vs-preview.html#if-im-in-jupyter-labhub",
    "title": "Render vs. Preview",
    "section": "If I’m in Jupyter Lab/Hub",
    "text": "If I’m in Jupyter Lab/Hub\nIn terminal, cd to repo…\n\nTroubleshooting\nIf it hangs/if I get errors:\nCheck the specific notebook, are there ---? Delete those. Is there too much in the first raw cell? Change that"
  },
  {
    "objectID": "render-vs-preview.html#if-im-in-rstudio-ide",
    "href": "render-vs-preview.html#if-im-in-rstudio-ide",
    "title": "Render vs. Preview",
    "section": "If I’m in RStudio IDE",
    "text": "If I’m in RStudio IDE\nBuild tab click buttons….\nTerminal…\nOr alternatively, R console…\nWhen does it preview automatically?"
  },
  {
    "objectID": "basic-workflows/rstudio.html#setup-rstudio-and-github",
    "href": "basic-workflows/rstudio.html#setup-rstudio-and-github",
    "title": "From RStudio",
    "section": "Setup RStudio and GitHub",
    "text": "Setup RStudio and GitHub\nFor a workflow with RStudio and GitHub on your local computer, you will need four things:\n\nR\nRStudio\nGit\nGitHub\n\nFollow the UCSB MEDS Installation Guide for detailed instructions on how to create accounts, download, install, and configure on Mac and Windows. (For an even more detailed walk-through, see Allison Horst’s ESM 206 Google Doc). Thanks for sharing Allison!\nIf you’d like to practice the workflow with RStudio and GitHub, follow R for Excel Users’ GitHub Chapter. This describes how to create a GitHub repository, clone it to RStudio, make edits, and practice syncing."
  },
  {
    "objectID": "basic-workflows/rstudio.html#install-quarto",
    "href": "basic-workflows/rstudio.html#install-quarto",
    "title": "From RStudio",
    "section": "Install Quarto",
    "text": "Install Quarto\nDownload Quarto from https://quarto.org/docs/get-started/. Follow the installation wizard on your computer. When it is complete, you won’t see an application or any new software, but it is now available to RStudio."
  },
  {
    "objectID": "basic-workflows/rstudio.html#rstudio-landscape",
    "href": "basic-workflows/rstudio.html#rstudio-landscape",
    "title": "From RStudio",
    "section": "RStudio Landscape",
    "text": "RStudio Landscape\nTODO: screenshots of IDE, orienting"
  },
  {
    "objectID": "basic-workflows/rstudio.html#lets-add-a-file",
    "href": "basic-workflows/rstudio.html#lets-add-a-file",
    "title": "From RStudio",
    "section": "Let’s add a file",
    "text": "Let’s add a file"
  },
  {
    "objectID": "basic-workflows/rstudio.html#visual-editor",
    "href": "basic-workflows/rstudio.html#visual-editor",
    "title": "From RStudio",
    "section": "Visual Editor",
    "text": "Visual Editor"
  },
  {
    "objectID": "basic-workflows/rstudio.html#render-on-save",
    "href": "basic-workflows/rstudio.html#render-on-save",
    "title": "From RStudio",
    "section": "Render on Save",
    "text": "Render on Save"
  },
  {
    "objectID": "basic-workflows/index.html#quarto.yml-quick-primer",
    "href": "basic-workflows/index.html#quarto.yml-quick-primer",
    "title": "Quarto Overview",
    "section": "_quarto.yml quick primer",
    "text": "_quarto.yml quick primer\n_quarto.yml is your control panel\n[screenshot] and describe a few high-level things\nSpacing is super important."
  },
  {
    "objectID": "basic-workflows/index.html#plan-what-you-want-to-do",
    "href": "basic-workflows/index.html#plan-what-you-want-to-do",
    "title": "Quarto Overview",
    "section": "Plan what you want to do",
    "text": "Plan what you want to do\nFrom this starting site, what do you want to do? You’ll likely want to delete and add chapters, reorder existing chapters, and edit content. We’ll show a few examples of the quarto workflow to get you started."
  },
  {
    "objectID": "basic-workflows/browser.html#develop-content",
    "href": "basic-workflows/browser.html#develop-content",
    "title": "From the Browser",
    "section": "Develop content",
    "text": "Develop content\nLet’s change the date on the home page of this website.\nClicking the pencil to edit directly\nCan only work on one file at a time"
  },
  {
    "objectID": "basic-workflows/jupyterhub.html#setup",
    "href": "basic-workflows/jupyterhub.html#setup",
    "title": "From JupyterHub",
    "section": "Setup",
    "text": "Setup\n[screenshot of setup]"
  },
  {
    "objectID": "basic-workflows/jupyterhub.html#install-quarto",
    "href": "basic-workflows/jupyterhub.html#install-quarto",
    "title": "From JupyterHub",
    "section": "Install Quarto",
    "text": "Install Quarto\nDownload Quarto from https://quarto.org/docs/get-started/. Follow the installation wizard on your computer. When it is complete, you won’t see an application or any new software, but it is now available to RStudio."
  },
  {
    "objectID": "basic-workflows/jupyterhub.html#lets-add-a-file",
    "href": "basic-workflows/jupyterhub.html#lets-add-a-file",
    "title": "From JupyterHub",
    "section": "Let’s add a file",
    "text": "Let’s add a file"
  },
  {
    "objectID": "first-observations.html#exploring-online",
    "href": "first-observations.html#exploring-online",
    "title": "First Observations",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nFirst Observations\nBasic Workflows\nRender vs. Preview\nGetting Sophisticated\n\nMost of these are pages, but you’ll see that “Basic Workflows” is a folder with additional pages inside.\n\n\nThe website’s repo\nLet’s go to this website’s GitHub repository (also called a “repo”), https://github.com/openscapes/quarto-website-tutorial. From this website, you can get there by clicking the GitHub octocat icon underneath the Openscapes logo (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we’ve seen above, they have red arrows marking them. You’ll see the “basic-workflows” folder and the rest in this site are .md files, which are plain Markdown files. index.md is the home page.\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\n\n\n_quarto.yml\nThere is also a _quarto.yml file, which is the website’s configuration file. It is a directory of the order that the pages/chapters will be in. This is where you update the organization of your website, while you update the content of those pages in the specific file. If we compare side-by-side, you’ll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nThis type of file (.yml or .yaml) is written in YAML (“Yet Another Markup Language”). You’ll be able to shift the arrangement of webpages by reordering/adding/deleting them in the _quarto.yml file following the patterns you see in this example. As you modify _quarto.yml, the most important thing to know is that spacing matters. Pay attention to whether text is indented by one, two, four, or other spaces, and make sure you follow it; if your site is not looking as expected it is likely a silent error in your YAML. Some text editors like RStudio provide debugging support for YAML and are highly recommended to save you hours of debugging time."
  },
  {
    "objectID": "first-observations.html#fork-to-your-account",
    "href": "first-observations.html#fork-to-your-account",
    "title": "First Observations",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet’s start with an existing Quarto site and copy it into your space to edit. First, choose an existing website/book to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nApproach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you’ve got a copy of your repo of choice in your own GitHub account, and you’re set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can’t fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you’ll need to do the following. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green “Code” button and select “Download ZIP”. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you’d like.\n\n\nAdd template site files\nTo use the GitHub file uploader, click the button next to the green “Code” button that says “Add file”. Add file > Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A, and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you’re working in the browser.\nNote: if you’re comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that can be preferable to the uploader, which does have limitations with complex repos (although the uploader works fine with this tutorial repo).\n\n\nSet up GitHub publishing\nIf you’ve used the GitHub uploader, you are not quite set up for publishing. We’ll do this in a few steps: we’ll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository in blue at the top-left (the url in your browser window should say https://github.com/username/repo-name.\nAdd file > Create new file. Name it exactly this: .github/workflows/quarto-render.yml\nStart by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!) and finally, quarto-render.yml.\nThen, you’ll have an empty new file. Paste this inside - you can click on the top-right of this box to copy all the code inside this code box:\nname: Render and deploy quarto files\non: \n  push:\n  pull_request:\n\njobs:\n  quarto-render-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: \"Install Quarto and render project\"\n      uses: nasa-openscapes/quarto-render@v0.3.79 \n\n    - name: \"Deploy to gh-pages\"\n      uses: peaceiris/actions-gh-pages@v3\n      if: github.ref == 'refs/heads/main'\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: ./_site\nCommit this to save your new quarto-render.yml file. This is your GitHub Action.\nNext, we’ll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green “Code” button, click the button that says “main”. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says “Create branch: gh-pages from main”.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under “Source”, select gh-pages root, and press Save. You’ll then see a green highlighted text saying that your site is published at a “github.io” url .\n\n\n\n\n\nTo confirm this, go back to your main repository page. You’ll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\n\n\nIf you do not see this orange dot, you might need to make a small commit to trigger the GitHub Actions build. If this is the case, click the pencil on the top-right of the README.md file, add some small edit (like a space after a period), and scroll down to click commit. Now you should see the orange dot.\n\n\n\n\n\nWhen your orange do becomes a green check, you can go inspect your published site at “https://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial."
  },
  {
    "objectID": "first-observations.html#renaming-your-repo",
    "href": "first-observations.html#renaming-your-repo",
    "title": "First Observations",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you’d like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.\nNow you can start editing. The next chapter describes how starting off from the browser, using Markdown."
  },
  {
    "objectID": "getting-sophisticated.html",
    "href": "getting-sophisticated.html",
    "title": "Getting Sophisticated",
    "section": "",
    "text": "There are a lot of ways to make you website design more sophisticated. Here are a few ways to help you get started. Note that Quarto builds from what RStudio learned in making RMarkdown, so while these notes discuss RMarkdown, they are relevant here too!\nhttps://jules32.github.io/rmarkdown-website-tutorial/getting_sophisticated.html"
  }
]